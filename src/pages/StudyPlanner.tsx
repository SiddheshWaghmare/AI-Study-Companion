import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Button } from '../components/ui/Button';
import { generateStudyPlan } from '../utils/api';

const StudyPlanner: React.FC = () => {
  const navigate = useNavigate();
  const [goal, setGoal] = useState('');
  const [topics, setTopics] = useState('');
  const [examDate, setExamDate] = useState('');
  const [hoursPerDay, setHoursPerDay] = useState('');
  const [plan, setPlan] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);


  const handleGeneratePlan = async () => {
    setIsLoading(true);
    setError(null);
    setPlan(null);
    try {
      // Calculate days left until the exam
      const today = new Date();
      const exam = new Date(examDate);
      const msPerDay = 1000 * 60 * 60 * 24;
      const daysLeft = Math.max(1, Math.ceil((exam.getTime() - today.getTime()) / msPerDay));

      // Create a prompt string using the user input fields and days left
      const prompt = `Goal/Subject: ${goal}\nTopics: ${topics}\nExam Date: ${examDate}\nHours per Day: ${hoursPerDay}\n\nYou have ${daysLeft} day(s) until the exam. Please create a detailed, realistic, and efficient study plan that fits this exact timeframe. Prioritize the most important topics and maximize daily learning.`;
      const response = await generateStudyPlan(prompt);

      if (response.text && response.text.trim().length > 0) {
        setPlan(response.text);
      } else {
        setPlan(null);
        setError('No study plan was generated by the AI.');
      }
    } catch (err) {
      setError('Failed to generate plan. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <motion.div
      className="bg-[#15192a] rounded-2xl shadow-2xl max-w-2xl w-full flex flex-col items-center justify-center mx-auto my-24"
      initial={{ opacity: 0, y: 40 }}
      animate={{ opacity: 1, y: 0 }}
    >
      <div className="w-full flex flex-col items-center justify-center p-0 sm:p-0">
        <div className="w-full flex items-center gap-3 px-6 pt-6 pb-2">
        <button
          className="group flex items-center focus:outline-none"
          onClick={() => navigate('/home')} 
          aria-label="Back to WelcomeScreen"
          style={{ background: 'none', border: 'none', padding: 0 }}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth={2.2}
            stroke="url(#arrow-gradient)"
            className="w-6 h-6 mr-1 group-hover:brightness-125"
            style={{ display: 'inline-block' }}
          >
            <defs>
              <linearGradient id="arrow-gradient" x1="0" y1="0" x2="24" y2="0" gradientUnits="userSpaceOnUse">
                <stop stopColor="#a78bfa" />
                <stop offset="1" stopColor="#f472b6" />
              </linearGradient>
            </defs>
            <path stroke="url(#arrow-gradient)" strokeLinecap="round" strokeLinejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
          </svg>
        </button>
        <h2 className="text-2xl font-bold text-white ml-1">AI Study Planner</h2>
      </div>
        <div className="flex flex-col w-full px-4 pb-4">
          <div className="bg-[#181d2f] p-6 rounded-xl w-full flex flex-col gap-6">
            <div>
              <label className="block font-semibold mb-2 text-gray-200">Study Goal / Subject</label>
              <input className="w-full p-3 rounded-lg border border-[#232946] bg-[#232946] text-white focus:outline-none focus:ring-2 focus:ring-blue-600 placeholder:text-gray-400 transition" value={goal} onChange={e => setGoal(e.target.value)} placeholder="e.g., Prepare for Database Exam" />
            </div>
            <div>
              <label className="block font-semibold mb-2 text-gray-200">Topics <span className="font-normal text-xs text-gray-400">(comma or new-line separated)</span></label>
              <textarea className="w-full p-3 rounded-lg border border-[#232946] bg-[#232946] text-white focus:outline-none focus:ring-2 focus:ring-blue-600 placeholder:text-gray-400 transition" rows={3} value={topics} onChange={e => setTopics(e.target.value)} placeholder="Normalization, Indexes, Transactions, ..." />
            </div>
            <div className="flex gap-4">
              <div className="flex-1">
                <label className="block font-semibold mb-2 text-gray-200">Exam Date</label>
                <input type="date" className="w-full p-3 rounded-lg border border-[#232946] bg-[#232946] text-white focus:outline-none focus:ring-2 focus:ring-blue-600 placeholder:text-gray-400 transition" value={examDate} onChange={e => setExamDate(e.target.value)} />
              </div>
              <div className="flex-1">
                <label className="block font-semibold mb-2 text-gray-200">Hours/Day</label>
                <input type="number" min="1" max="24" className="w-full p-3 rounded-lg border border-[#232946] bg-[#232946] text-white focus:outline-none focus:ring-2 focus:ring-blue-600 placeholder:text-gray-400 transition" value={hoursPerDay} onChange={e => setHoursPerDay(e.target.value)} placeholder="2" />
              </div>
            </div>
            <Button onClick={handleGeneratePlan} isLoading={isLoading} disabled={isLoading || !goal || !topics || !examDate || !hoursPerDay}>
              Generate Plan
            </Button>
            {error && <div className="text-red-400 font-medium text-center">{error}</div>}
            {plan && (
              <div className="mt-8 bg-[#232946] p-6 rounded-lg shadow text-white overflow-x-auto">
                <h2 className="font-bold mb-3 text-lg text-white">Your Personalized Study Plan</h2>
                <div className="whitespace-pre-line text-base leading-relaxed" dangerouslySetInnerHTML={{
                  __html: plan
                    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold markdown
                    .replace(/^\s*\*\s?/gm, '') // Remove leading * from bullet points
                }} />
              </div>
            )}
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default StudyPlanner;
